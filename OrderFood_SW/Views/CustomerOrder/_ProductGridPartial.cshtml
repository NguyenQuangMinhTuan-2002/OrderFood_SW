@model List<Dish>
<!-- Products Grid -->
<div class="products-grid">
    @foreach (var item in Model)
    {
        <div class="product-card">
            <img src="~/images/@item.ImageUrl" alt="@item.DishName" class="product-image">
            <div class="product-info">
                <div class="product-name">@item.DishName</div>
                <div class="product-description">@item.DishDescription</div>
                <div class="product-price">$@item.DishPrice</div>
                <div class="product-actions">
                    <span class="veg-indicator veg">@item.CategoryId</span>

                    <!-- Add to Cart Form -->
                    <form asp-action="AddCart" method="post" class="add-to-cart-form">
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="dishId" value="@item.DishId" />

                        <div style="display: flex; gap: 20px">
                            <input class="form-control me-2" 
                            style="width:60px; height:30px; 
                            border: 5px double green; 
                            border-radius: 15px; 
                            text-align:center"
                            type="number" value="1" min="1" name="Quantity" />

                            <button type="submit" class="add-btn">Add to Cart</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    }
</div>

<!-- Success/Error Messages -->
<div id="cart-messages" style="position: fixed; top: 20px; right: 20px; z-index: 1000;"></div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const forms = document.querySelectorAll('.add-to-cart-form');

        forms.forEach(form => {
            form.addEventListener('submit', function(e) {
                e.preventDefault(); // Prevent default form submission and page redirect

                const submitBtn = form.querySelector('.add-btn');
                const formData = new FormData(form);
                const dishId = formData.get('dishId');
                const quantity = formData.get('Quantity');

                // Visual feedback - button loading state
                const originalText = submitBtn.textContent;
                submitBtn.textContent = 'Adding...';
                submitBtn.disabled = true;
                submitBtn.style.opacity = '0.7';

                // AJAX request to add to cart
                fetch(form.action, {
                    method: 'POST',
                    body: formData,
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Success - show confirmation message
                        showMessage('✅ Item added to cart!', 'success');

                        // Update cart in real-time
                        updateCartDisplay();

                        // Reset quantity to 1
                        form.querySelector('input[name="Quantity"]').value = 1;
                    } else {
                        throw new Error(data.message || 'Failed to add to cart');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showMessage('❌ Failed to add to cart. Please try again.', 'error');
                })
                .finally(() => {
                    // Reset button state
                    setTimeout(() => {
                        submitBtn.textContent = originalText;
                        submitBtn.disabled = false;
                        submitBtn.style.opacity = '1';
                    }, 500);
                });
            });
        });
    });

    // Show success/error messages
    function showMessage(message, type) {
        const messagesContainer = document.getElementById('cart-messages');
        const messageDiv = document.createElement('div');

        messageDiv.className = `alert alert-${type === 'success' ? 'success' : 'danger'}`;
        messageDiv.style.cssText = `
            padding: 10px 15px;
            margin-bottom: 10px;
            border-radius: 5px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
            background-color: ${type === 'success' ? '#d4edda' : '#f8d7da'};
            color: ${type === 'success' ? '#155724' : '#721c24'};
            border: 1px solid ${type === 'success' ? '#c3e6cb' : '#f5c6cb'};
        `;
        messageDiv.textContent = message;

        messagesContainer.appendChild(messageDiv);

        // Auto-remove message after 3 seconds
        setTimeout(() => {
            messageDiv.remove();
        }, 3000);
    }
</script>